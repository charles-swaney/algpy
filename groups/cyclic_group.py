from typing import Dict
import gen_cyclic_cayley as gcc
from group import Group
import sys
from pathlib import Path

current_dir = Path(__file__).resolve().parent
root_dir = current_dir.parent
sys.path.append(str(root_dir))


class CyclicGroup(Group):
    """
    The finite cylic group C_n of order n is a group which is generated by a single element a. 
    Namely, if x is any element of G, then x = a^m for some m < n, with e = a^0. Such a group
    is isomorphic to Z/nZ, so the elements are residue classes modulo n, with addition modulo
    n as the binary operation. 

    Attributes:
        - n_elements (int): the number of elements
        - cayley_table (Dict[Any, Dict[Any, Any]]): 
            a nested dictionary representing the Cayley table of the elements of C_n. Does not
            need to be passed in as a parameter.

    Parameters:
        - n_elements (int): the number of elements, a positive integer

    Methods:
        - _generate_input_table: 
            generates the Cayley table for the cyclic group with n elements.
    """
    def __init__(self, n_elements: int, check_axioms=False) -> Dict[int, Dict[int, int]]:
        self.check_axioms = check_axioms
        if n_elements <= 0:
            raise ValueError('n_elements must be a positive integer.')
        self.n_elements = n_elements
        cayley_table = self._generate_input_table(n_elements)
        super().__init__(input_table=cayley_table, check_axioms=check_axioms)

    def _generate_input_table(self, n_elements: int) -> Dict[int, Dict[int, int]]:
        # Generates a input table for Cayley table for the Cyclic group of order n, C_n.
        return gcc.gen_cyclic_table(n_elements)
